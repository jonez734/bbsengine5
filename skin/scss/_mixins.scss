//
// @see https://gist.github.com/garyharan/957284
//

/* 'css3prefix mixin' @see https://github.com/matthieua/sass-css3-mixins/blob/master/css3-mixins.scss */
/// Adds a browser prefix to the property wo regard for actual browser features
/// @param {*} $property Property
/// @param {*} $value Value
/// 
@mixin css3prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}

@mixin boxshadow($spread: 0px, $color: rgba(black, 0.5), $blur: 2px, $horizontaloffset: 3px, $verticaloffset: 3px)
{
	box-shadow: $horizontaloffset $verticaloffset $blur $spread $color;
//@include css3prefix(box-shadow, $horizontaloffset $verticaloffset $blur $size $color);
}

@mixin textshadow($horizontal: 3px, $vertical: 3px, $offset: 0px, $color: rgba(0, 0, 0, 0.4))
{
	//@include css3prefix(text-shadow, $horizontal $vertical $offset $color);
	text-shadow: $horizontal $vertical $offset $color;
}

@mixin backgroundgradient($from, $to, $directionstart:to left top, $directionend:right bottom)
{
	background-image: linear-gradient($directionstart, $from, $to);
	//background-image: -webkit-gradient(linear, $directionstart, $directionend, from($from), to($to));
	//background-image: -webkit-linear-gradient($directionstart, $from, $to);
	//background-image:    -moz-linear-gradient($directionstart, $from, $to);
	//background-image:     -ms-linear-gradient($directionstart, $from, $to);
	//background-image:      -o-linear-gradient($directionstart, $from, $to);
	//background-image:         linear-gradient($directionstart, $from, $to);
}

@mixin bordergradient($from, $to, $directionstart:left top, $directionend:right bottom)
{
 // border: 2px solid transparent;
 //-moz-border-image: -moz-linear-gradient($directionstart, $from 0%, $to 100%);
 //-webkit-border-image: -webkit-linear-gradient($directionstart, $from, $to 0%, $to 100%);
 border-image: linear-gradient($directionend, $from 0%, $to 100%);
 border-image-slice: 1;

}

/* 'keyframes' mixin @see http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/*/
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}

/* 'animation' mixin from https://developer.mozilla.org/en-US/docs/Web/CSS/animation */
// duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name
// duration | timing-function | delay | name 
// duration | name 
@mixin animation($str) {
 animation: #{$str};
//@include css3prefix("animation", $str);
  //-webkit-animation: #{$str};
  //-moz-animation: #{$str};
  //-ms-animation: #{$str};
  //-o-animation: #{$str};
  //animation: #{$str};      
}

@mixin transform($transforms...) {
// @include css3prefix("transform", $transforms);
	transform: #{$transforms};
//	   -moz-transform: #{$transforms};
//	     -o-transform: #{$transforms};
//	    -ms-transform: #{$transforms};
//	-webkit-transform: #{$transforms};
}

// 
/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
/* legacy-direction function @see http://www.sitepoint.com/building-linear-gradient-mixin-sass/ */
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin lineargradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

/* 'transition' mixin @see http://codepen.io/sawmac/pen/cayhK */
@mixin transition($transition...) {
 transition: $transition;
//@include css3prefix("transition", $transition);
//  -moz-transition:    $transition;
//  -o-transition:      $transition;
//  -webkit-transition: $transition;
//  transition:         $transition;
}
@mixin transition-property($property...) {
@include css3prefix("transition-property", $property);
//  -moz-transition-property:    $property;
//  -o-transition-property:      $property;
//  -webkit-transition-property: $property;
//  transition-property:         $property;
}
@mixin transition-duration($duration...) {
  @include css3prefix("transition-duration", $duration);
//  -moz-transition-property:    $duration;
//  -o-transition-property:      $duration;
//  -webkit-transition-property: $duration;
//  transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
 @include css3prefix("transition-timing-function", $timing);
 // -moz-transition-timing-function:    $timing;
 // -o-transition-timing-function:      $timing;
 // -webkit-transition-timing-function: $timing;
 // transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
 @include css3prefix("transition-delay", $delay);
//  -moz-transition-delay:    $delay;
//  -o-transition-delay:      $delay;
//  -webkit-transition-delay: $delay;
//  transition-delay:         $delay;
}

/* 'gradientanimation' mixin @see https://medium.com/@dave_lunny/animating-css-gradients-using-only-css-d2fd7671e759#.jlbdgs4jl */
// @since 20151231
// this is a mixin that will animate between two gradients.  the gradients are
// generated at run time using the backgroundgradient mixin and are based on
// variables in _vars.scss.
@mixin gradientanimation($start, $end, $transTime) {
  background-size: 100%;
  @include backgroundgradient($start, $end);
  position: relative;
  &:before {
    @include backgroundgradient($end, $start);
    content: '';    
    display: block;
    height: 100%;
    position: absolute;
    top: 0; left: 0;
    opacity: 0;
    width: 100%;
    @include transition(opacity $transTime);
    //transition: opacity $transTime;
  }
  &:hover {
     &:before {
       opacity: 1; 
     }
  }
}
/* 'animation' mixin @see http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
@mixin animation($str...) {
  @include css3prefix("animation", $str);
//  -webkit-animation: #{$str};
//  -moz-animation: #{$str};
//  -ms-animation: #{$str};
//  -o-animation: #{$str};
//  animation: #{$str};
}
